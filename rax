#!/bin/bash
# rax: https://github.com/jverghese/rax

# Shell script based JSON parser.
# TODO: Add build file to inline this script.
. lib/JSON.sh

# Config
# Todo: Use rax_creds config variable wherever possible.
rax_creds="~/.raxcreds"

# URLs
auth_endpoint=https://auth.api.rackspacecloud.com/v1.1/auth

function retrieveCredentials() {
  if [ -f ~/.raxcreds ]
  then
    creds=$(cat ~/.raxcreds)
    username=$(echo $creds | cut -d ' ' -f1)
    api=$(echo $creds | cut -d ' ' -f2)
  else
    echo "Rax cred file not found."
    exit 1
  fi
}

function jsonPost() {
  echo "curl -i -H "Content-Type: application/json" -H "Accept: application/json" $*"
}

# Accepts $*: A list of other curl parameters.
function jsonPostWithCreds() {
  curl -s -H "Content-Type: application/json" \
       -H "Accept: application/json" \
       -d '{"credentials": {"username": "'$username'","key": "'$api'"}}' $*
}

# Parses auth response and returns the auth token.
function parseAuthToken() {
  echo $1 | tokenize | parse | \
         egrep '\["auth","token","id"]' | \
         awk -F "\t" '{print $NF}' | tr -d '"'
}

function updateConfigFile() {
  if [ -f ~/.rax ]
  then
    echo "Updating auth token in existing config file."
    rm ~/.rax; touch ~/.rax
    echo $1 >> ~/.rax
  else
    echo "Creating new config file with token."
    touch ~/.rax
    echo $1 >> ~/.rax
  fi
}

# Returns auth token from rax file.
function getAuthToken() {
  if [ -f ~/.rax ]
  then
    cat ~/.rax
  else
    echo "Auth token not found."
    exit 1
  fi
}

function getServers() {
  res=$(curl -w "\n%{http_code}" -s -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'X-Auth-Token: '$authtoken'' 'https://dfw.servers.api.rackspacecloud.com/v2/657527/servers')
  # Get all lines but the last.
  jsonResponse=$(echo "$res" | sed -n '$!p')
  resCode=$(echo "$res" | tail -1)
  if [ "$resCode" == "401" ]; then
    echo "Your auth key may have expired. Please re-run 'rax auth' or 'rax login'"
  else
    names=$(echo $jsonResponse | tokenize | parse | \
         egrep '\["servers",.*,"name"]' | \
         awk -F "\t" '{print $NF}' |  tr -d '"')
    ids=$(echo $jsonResponse | tokenize | parse | \
         egrep '\["servers",.*,"id"]' | \
         awk -F "\t" '{print $NF}' |  tr -d '"')
  fi
  createCols "$names" "$ids"
}

# Accepts:
# $1: A variable with a multiline string
# $2: A line number
function readLine() {
  echo "$1" | head -n $2 | tail -1
}

function createCols() {
  lines=$(echo "$1" | wc -l)
  for (( c=1; c<=$lines; c++ ))
  do
    line1=$(readLine "$1" "$c")
    line2=$(readLine "$2" "$c")
    printf "%-25s %s\n" $line1 $line2
  done
  #while read line; do
    #while read line2; do
      #echo "$line $line2";
    #done <<< "$2"
  #done <<< "$1"
}

# function read input from stdin and write output to the stdout
# caller must take care about where come stdin and where go stdout
# Note: This function is unused.
log()
{
  while read data
  do
      echo "[$(date +"%D %T")] $data"
  done
}

function rax() {
  case $1 in
    "auth")
      authResponse=$(jsonPostWithCreds $auth_endpoint)
      authToken=$(parseAuthToken $authResponse)
      updateConfigFile $authToken;;
    "server")
      authtoken=$(getAuthToken);
      getServers;;
    "dashboard")
      authtoken=$(getAuthToken);
      open "https://sage-preprod.glimpse.rax.io/sso?authtoken=$authtoken";;
    *)
      echo "Invalid command: $1.";;
  esac
}

retrieveCredentials
rax $1
